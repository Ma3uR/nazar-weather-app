// –ó–º—ñ–Ω—é—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –Ω–∞ –∑–º—ñ–Ω–Ω—ñ
let CITY = 'Cherkasy';
let COUNTRY = 'UA';
const WEATHER_API_KEY = '53688d3bf952f07624952c34d4576678';

document.addEventListener('DOMContentLoaded', function() {
    const mainContent = document.querySelector('.container');
    const locationSetup = document.getElementById('locationSetup');
    const geoStep = document.getElementById('geoStep');
    const countryStep = document.getElementById('countryStep');
    const cityStep = document.getElementById('cityStep');
    const continueButton = document.getElementById('continueButton');
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    mainContent.style.display = 'none';

    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∫—Ä–∞—ó–Ω –∑ –º—ñ—Å—Ç–∞–º–∏
    const popularCountries = [
        { 
            code: 'UA', 
            name: '–£–∫—Ä–∞—ó–Ω–∞', 
            flag: 'üá∫üá¶',
            cities: ['–ö–∏—ó–≤', '–•–∞—Ä–∫—ñ–≤', '–û–¥–µ—Å–∞', '–î–Ω—ñ–ø—Ä–æ', '–õ—å–≤—ñ–≤', '–ß–µ—Ä–∫–∞—Å–∏', '–ü–æ–ª—Ç–∞–≤–∞']
        },
        { 
            code: 'PL', 
            name: '–ü–æ–ª—å—â–∞', 
            flag: 'üáµüá±',
            cities: ['–í–∞—Ä—à–∞–≤–∞', '–ö—Ä–∞–∫—ñ–≤', '–õ–æ–¥–∑—å', '–í—Ä–æ—Ü–ª–∞–≤', '–ü–æ–∑–Ω–∞–Ω—å']
        },
        // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∫—Ä–∞—ó–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
    ];

    let selectedCountry = null;

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É
    document.getElementById('manualButton').addEventListener('click', () => {
        geoStep.style.display = 'none';
        countryStep.style.display = 'block';
        showCountryList();
    });

    // –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –∫—Ä–∞—ó–Ω
    function showCountryList() {
        const countriesList = document.querySelector('.countries-list');
        countriesList.innerHTML = '';
        
        popularCountries.forEach(country => {
            const countryElement = document.createElement('div');
            countryElement.className = 'country-item';
            countryElement.innerHTML = `${country.flag} ${country.name}`;
            
            countryElement.addEventListener('click', () => {
                selectedCountry = country;
                showCityStep(country);
                
                // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä
                document.querySelectorAll('.country-item').forEach(item => {
                    item.classList.remove('selected');
                });
                countryElement.classList.add('selected');
            });
            
            countriesList.appendChild(countryElement);
        });
    }

    // –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç
    function showCityStep(country) {
        countryStep.style.display = 'none';
        cityStep.style.display = 'block';
        
        const citiesList = document.querySelector('.cities-list');
        citiesList.innerHTML = '';
        
        country.cities.forEach(cityName => {
            const cityElement = document.createElement('div');
            cityElement.className = 'city-item';
            cityElement.textContent = cityName;
            
            cityElement.addEventListener('click', () => {
                CITY = cityName;
                COUNTRY = country.code;
                
                // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä
                document.querySelectorAll('.city-item').forEach(item => {
                    item.classList.remove('selected');
                });
                cityElement.classList.add('selected');
                continueButton.style.display = 'block';
            });
            
            citiesList.appendChild(cityElement);
        });
    }

    // –ü–æ—à—É–∫ –ø–æ –∫—Ä–∞—ó–Ω–∞—Ö
    document.getElementById('countrySearch').addEventListener('input', function(e) {
        const searchText = e.target.value.toLowerCase();
        const filteredCountries = popularCountries.filter(country => 
            country.name.toLowerCase().includes(searchText)
        );
        
        const countriesList = document.querySelector('.countries-list');
        countriesList.innerHTML = '';
        
        filteredCountries.forEach(country => {
            const countryElement = document.createElement('div');
            countryElement.className = 'country-item';
            countryElement.innerHTML = `${country.flag} ${country.name}`;
            
            countryElement.addEventListener('click', () => {
                selectedCountry = country;
                showCityStep(country);
            });
            
            countriesList.appendChild(countryElement);
        });
    });

    // –ü–æ—à—É–∫ –ø–æ –º—ñ—Å—Ç–∞—Ö
    document.getElementById('citySearch').addEventListener('input', function(e) {
        if (!selectedCountry) return;
        
        const searchText = e.target.value.toLowerCase();
        const filteredCities = selectedCountry.cities.filter(city => 
            city.toLowerCase().includes(searchText)
        );
        
        const citiesList = document.querySelector('.cities-list');
        citiesList.innerHTML = '';
        
        filteredCities.forEach(cityName => {
            const cityElement = document.createElement('div');
            cityElement.className = 'city-item';
            cityElement.textContent = cityName;
            
            cityElement.addEventListener('click', () => {
                CITY = cityName;
                COUNTRY = selectedCountry.code;
                continueButton.style.display = 'block';
            });
            
            citiesList.appendChild(cityElement);
        });
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—ñ"
    continueButton.addEventListener('click', () => {
        locationSetup.style.display = 'none';
        mainContent.style.display = 'block';
        getCurrentWeather();
        getWeeklyForecast();
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
    document.getElementById('geoButton').addEventListener('click', function() {
        const button = this;
        
        if (navigator.geolocation) {
            // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            button.classList.add('loading');
            button.innerHTML = '<i>üîÑ</i> –í–∏–∑–Ω–∞—á–∞—î–º–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è...';
            
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    // –û—Ç—Ä–∏–º—É—î–º–æ –º—ñ—Å—Ç–æ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${position.coords.latitude}&lon=${position.coords.longitude}&limit=1&appid=${WEATHER_API_KEY}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data[0]) {
                                CITY = data[0].name;
                                COUNTRY = data[0].country;
                                showMainContent();
                            }
                        })
                        .catch(() => {
                            button.classList.remove('loading');
                            button.innerHTML = '<i>üìç</i> –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑';
                            alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—Ä—É—á–Ω—É.');
                            showCountryStep();
                        });
                },
                (error) => {
                    button.classList.remove('loading');
                    button.innerHTML = '<i>üìç</i> –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑';
                    alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –≤—Ä—É—á–Ω—É.');
                    showCountryStep();
                },
                {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 0
                }
            );
        } else {
            alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –≤—Ä—É—á–Ω—É.');
            showCountryStep();
        }
    });
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
function convertTemperature(celsius, unit) {
    if (unit === 'fahrenheit') {
        return Math.round((celsius * 9/5) + 32);
    }
    return Math.round(celsius);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
async function getCurrentWeather() {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY}&units=metric&appid=${WEATHER_API_KEY}&lang=ua`);
        const data = await response.json();
        
        const unit = document.getElementById('unitsSelect').value;
        const tempElement = document.querySelector('.degrees');
        const feelsLikeElement = document.querySelector('.temperature p');
        const windElement = document.querySelector('.info-item:nth-child(1) span');
        const humidityElement = document.querySelector('.info-item:nth-child(2) span');
        const pressureElement = document.querySelector('.info-item:nth-child(3) span');

        if (data.main) {
            const temp = convertTemperature(data.main.temp, unit);
            const feelsLike = convertTemperature(data.main.feels_like, unit);
            const unitSymbol = unit === 'fahrenheit' ? '¬∞F' : '¬∞C';

            tempElement.textContent = `${temp}${unitSymbol}`;
            feelsLikeElement.textContent = `–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ ${feelsLike}${unitSymbol}`;
            windElement.textContent = `${Math.round(data.wind.speed)} –º/—Å`;
            humidityElement.textContent = `${data.main.humidity}%`;
            const pressureInMmHg = Math.round(data.main.pressure * 0.750062);
            pressureElement.textContent = `${pressureInMmHg} –º–º`;
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏:', error);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
async function getWeeklyForecast() {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${CITY},${COUNTRY}&units=metric&appid=${WEATHER_API_KEY}&lang=ua`);
        const data = await response.json();
        const unit = document.getElementById('unitsSelect').value;
        
        if (data.list) {
            const dailyForecasts = {};
            const days = ['–ù–µ–¥—ñ–ª—è', '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞'];
            const today = new Date().getDay();
            
            const nextDays = [];
            for (let i = 0; i < 5; i++) {
                const dayIndex = (today + i) % 7;
                nextDays.push(days[dayIndex]);
            }
            
            data.list.forEach(forecast => {
                const date = new Date(forecast.dt * 1000);
                const dayName = days[date.getDay()];
                
                if (nextDays.includes(dayName)) {
                    if (!dailyForecasts[dayName]) {
                        dailyForecasts[dayName] = {
                            temp: forecast.main.temp,
                            count: 1,
                            weather: forecast.weather[0].icon,
                            description: forecast.weather[0].description,
                            pop: forecast.pop // –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤
                        };
                    } else {
                        dailyForecasts[dayName].temp += forecast.main.temp;
                        dailyForecasts[dayName].count += 1;
                        // –ë–µ—Ä–µ–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ –∑–∞ –¥–µ–Ω—å
                        dailyForecasts[dayName].pop = Math.max(dailyForecasts[dayName].pop, forecast.pop);
                    }
                }
            });

            const forecastContainer = document.querySelector('.forecast-days');
            forecastContainer.innerHTML = '';

            nextDays.forEach((dayName) => {
                const forecast = dailyForecasts[dayName];
                if (forecast) {
                    const avgTemp = forecast.temp / forecast.count;
                    const temp = convertTemperature(avgTemp, unit);
                    const unitSymbol = unit === 'fahrenheit' ? '¬∞F' : '¬∞C';
                    const popPercentage = Math.round(forecast.pop * 100);
                    
                    const dayElement = document.createElement('div');
                    dayElement.className = 'day';
                    dayElement.innerHTML = `
                        <p>${dayName}</p>
                        <i>${getWeatherEmoji(forecast.weather)}</i>
                        <span>${temp}${unitSymbol}</span>
                        <div class="pop-info">
                            <span class="pop-icon">‚òî</span>
                            <span>${popPercentage}%</span>
                        </div>
                    `;
                    forecastContainer.appendChild(dayElement);
                }
            });
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:', error);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∫–æ–¥—É –ø–æ–≥–æ–¥–∏ –≤ –µ–º–æ–¥–∑—ñ
function getWeatherEmoji(iconCode) {
    const weatherIcons = {
        '01d': '‚òÄÔ∏è', // —è—Å–Ω–æ (–¥–µ–Ω—å)
        '01n': 'üåô', // —è—Å–Ω–æ (–Ω—ñ—á)
        '02d': 'üå§Ô∏è', // –º–∞–ª–æ—Ö–º–∞—Ä–Ω–æ (–¥–µ–Ω—å)
        '02n': '‚òÅÔ∏è', // –º–∞–ª–æ—Ö–º–∞—Ä–Ω–æ (–Ω—ñ—á)
        '03d': '‚òÅÔ∏è', // —Ö–º–∞—Ä–Ω–æ
        '03n': '‚òÅÔ∏è',
        '04d': '‚òÅÔ∏è', // –ø–æ—Ö–º—É—Ä–æ
        '04n': '‚òÅÔ∏è',
        '09d': 'üåßÔ∏è', // –¥–æ—â
        '09n': 'üåßÔ∏è',
        '10d': 'üå¶Ô∏è', // –¥–æ—â –∑ –ø—Ä–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏
        '10n': 'üåßÔ∏è',
        '11d': '‚õàÔ∏è', // –≥—Ä–æ–∑–∞
        '11n': '‚õàÔ∏è',
        '13d': 'üå®Ô∏è', // —Å–Ω—ñ–≥
        '13n': 'üå®Ô∏è',
        '50d': 'üå´Ô∏è', // —Ç—É–º–∞–Ω
        '50n': 'üå´Ô∏è'
    };
    return weatherIcons[iconCode] || 'üå°Ô∏è';
}

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É
document.getElementById('unitsSelect').addEventListener('change', function() {
    getCurrentWeather();
    getWeeklyForecast();
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–∞ –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
window.addEventListener('load', () => {
    getCurrentWeather();
    getWeeklyForecast();
    
    setInterval(() => {
        getCurrentWeather();
        getWeeklyForecast();
    }, 1800000);
});

// –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ–µ—Ç—ñ
function createConfetti() {
    const container = document.createElement('div');
    container.className = 'confetti-container active';
    document.body.appendChild(container);

    const emojis = ['üéâ', 'üéä', '‚ú®', '‚≠ê', 'üåü'];
    const colors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'];

    // –°—Ç–≤–æ—Ä—é—î–º–æ 50 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–æ–Ω—Ñ–µ—Ç—ñ
    for (let i = 0; i < 50; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = Math.random() * 100 + 'vw';
        confetti.style.animationDelay = Math.random() * 2 + 's';
        confetti.style.fontSize = Math.random() * 20 + 20 + 'px';
        
        // –í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î–º–æ –µ–º–æ–¥–∑—ñ –∞–±–æ –∫–æ–ª—å–æ—Ä–æ–≤–∏–π –∫–≤–∞–¥—Ä–∞—Ç
        if (Math.random() > 0.5) {
            confetti.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        } else {
            confetti.style.width = '10px';
            confetti.style.height = '10px';
            confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.transform = 'rotate(' + (Math.random() * 360) + 'deg)';
        }

        container.appendChild(confetti);
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
        container.remove();
    }, 5000);
}

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑—ñ—Ä–æ–∫
document.addEventListener('DOMContentLoaded', () => {
    const stars = document.querySelectorAll('.stars input');
    stars.forEach(star => {
        star.addEventListener('change', (e) => {
            if (e.target.value === '5') {
                createConfetti();
            }
        });
    });
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
async function getHistoricalWeather(daysAgo) {
    try {
        const historyData = [];
        for (let i = 1; i <= daysAgo; i++) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            const timestamp = Math.floor(date.getTime() / 1000);

            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY}&units=metric&appid=${WEATHER_API_KEY}&lang=ua&dt=${timestamp}`);
            const data = await response.json();

            if (data) {
                historyData.push({
                    temp: data.main.temp,
                    weather: data.weather[0].icon,
                    date: date,
                    humidity: data.main.humidity,
                    pressure: data.main.pressure,
                    wind: data.wind.speed,
                    description: data.weather[0].description
                });
            }
        }
        return historyData;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
function displayHistoricalData(data, container) {
    const dayNames = ['–ù–µ–¥—ñ–ª—è', '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞'];
    const dayElement = document.createElement('div');
    dayElement.className = 'historical-day';
    
    const date = new Date(data.date);
    const formattedDate = `${date.getDate()}.${date.getMonth() + 1}`;
    
    dayElement.innerHTML = `
        <div class="historical-date">
            <p>${dayNames[date.getDay()]}</p>
            <span>${formattedDate}</span>
        </div>
        <div class="historical-weather">
            <i>${getWeatherEmoji(data.weather)}</i>
            <span class="temp">${Math.round(data.temp)}¬∞C</span>
            <p class="description">${data.description}</p>
        </div>
        <div class="historical-details">
            <div><i>üí®</i> ${Math.round(data.wind)} –º/—Å</div>
            <div><i>üíß</i> ${data.humidity}%</div>
            <div><i>üìä</i> ${Math.round(data.pressure * 0.750062)} –º–º</div>
        </div>
    `;
    
    container.appendChild(dayElement);
}

// –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó
document.querySelector('.weather-card').insertAdjacentHTML('beforeend', `
    <div class="historical-section">
        <h3>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≥–æ–¥–∏</h3>
        <div class="history-buttons">
            <button class="show-history-btn">–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é</button>
            <button class="hide-history-btn" style="display: none;">–°—Ö–æ–≤–∞—Ç–∏</button>
        </div>
        <div class="historical-container"></div>
    </div>
`);

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
document.querySelector('.show-history-btn').addEventListener('click', async function() {
    const container = document.querySelector('.historical-container');
    const hideBtn = document.querySelector('.hide-history-btn');
    
    try {
        this.style.display = 'none';
        hideBtn.style.display = 'block';
        container.innerHTML = '<div class="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó...</div>';
        
        const historyData = await getHistoricalWeather(5);
        
        if (historyData && historyData.length > 0) {
            container.innerHTML = '';
            historyData.forEach(data => displayHistoricalData(data, container));
        } else {
            throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö');
        }
    } catch (error) {
        container.innerHTML = '<div class="error">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</div>';
        this.style.display = 'block';
        hideBtn.style.display = 'none';
    }
});

document.querySelector('.hide-history-btn').addEventListener('click', function() {
    const container = document.querySelector('.historical-container');
    const showBtn = document.querySelector('.show-history-btn');
    
    container.innerHTML = '';
    this.style.display = 'none';
    showBtn.style.display = 'block';
});

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–±–æ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥
document.querySelector('.settings-btn').addEventListener('click', function() {
    const settingsHtml = `
        <div class="settings-content">
            <h3>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h3>
            <div class="settings-group">
                <label for="nameInput">–Ü–º'—è:</label>
                <input type="text" id="nameInput" placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è">
            </div>
            <div class="settings-group">
                <label for="themeSelect">–¢–µ–º–∞:</label>
                <select id="themeSelect">
                    <option value="light">–°–≤—ñ—Ç–ª–∞</option>
                    <option value="dark">–¢–µ–º–Ω–∞</option>
                </select>
            </div>
            <div class="settings-group">
                <label for="unitsSelect">–û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É:</label>
                <select id="unitsSelect">
                    <option value="celsius">¬∞C</option>
                    <option value="fahrenheit">¬∞F</option>
                </select>
            </div>
            <div class="telegram-link">
                <a href="https://t.me/Vidgyku_na_temy_saita" target="_blank">
                    <i>üì±</i> –í—ñ–¥–≥—É–∫–∏ —Å–∞–π—Ç—É
                </a>
            </div>
        </div>
    `;
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    showModal(settingsHtml);
});